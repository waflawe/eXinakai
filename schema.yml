openapi: 3.0.3
info:
  title: eXinakai
  version: 1.1.0
  description: Your project description
paths:
  /api/v1/generate/password/:
    get:
      operationId: generate_password_retrieve
      tags:
      - generate
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RandomPassword'
          description: ''
  /api/v1/key/activate/:
    post:
      operationId: key_activate_create
      tags:
      - key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CryptographicKey'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CryptographicKey'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CryptographicKey'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Detail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedCode'
          description: ''
  /api/v1/password/change/:
    post:
      operationId: password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Detail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Detail'
          description: ''
  /api/v1/password/reset/:
    post:
      operationId: password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedCode'
          description: ''
  /api/v1/password/reset/confirm/:
    post:
      operationId: password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Detail'
          description: ''
  /api/v1/passwords/:
    get:
      operationId: passwords_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - passwords
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPasswordsList'
          description: ''
    post:
      operationId: passwords_create
      tags:
      - passwords
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Passwords'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Passwords'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Passwords'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Detail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Detail'
          description: ''
  /api/v1/passwords/{id}/:
    delete:
      operationId: passwords_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - passwords
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Detail'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Detail'
          description: ''
  /api/v1/settings/:
    get:
      operationId: settings_retrieve
      tags:
      - settings
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
          description: ''
    post:
      operationId: settings_create
      tags:
      - settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Settings'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Settings'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Detail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Detail'
          description: ''
  /api/v1/token/2fa/:
    post:
      operationId: token_2fa_create
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TwoFactorAuthenticationCode'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TwoFactorAuthenticationCode'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TwoFactorAuthenticationCode'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedCode'
          description: ''
  /api/v1/token/login/:
    post:
      operationId: token_login_create
      tags:
      - token
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: ''
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedCode'
          description: ''
        '400':
          description: No response body
  /api/v1/token/logout/:
    post:
      operationId: token_logout_create
      tags:
      - token
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Detail'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Detail'
          description: ''
components:
  schemas:
    AuthToken:
      type: object
      properties:
        token:
          type: string
      required:
      - token
    CryptographicKey:
      type: object
      properties:
        cryptographic_key:
          type: string
          maxLength: 512
      required:
      - cryptographic_key
    Detail:
      type: object
      properties:
        detail:
          type: string
      required:
      - detail
    DetailedCode:
      type: object
      properties:
        detail:
          type: string
        code:
          type: string
          maxLength: 32
      required:
      - code
      - detail
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - password
    PaginatedPasswordsList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Passwords'
    PasswordChange:
      type: object
      properties:
        old_password:
          type: string
          maxLength: 128
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
      - new_password1
      - new_password2
      - old_password
    PasswordReset:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirm:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
      - new_password1
      - new_password2
      - token
      - uid
    Passwords:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        note:
          type: string
          title: Примета
          maxLength: 256
        password:
          type: string
          readOnly: true
        time_added:
          type: object
          additionalProperties: {}
          readOnly: true
      required:
      - id
      - note
      - password
      - time_added
    RandomPassword:
      type: object
      properties:
        password:
          type: string
      required:
      - password
    Settings:
      type: object
      properties:
        username:
          type: string
          readOnly: true
          title: Имя пользователя
          description: Не более 16 символов, не менее 5. Буквы, цифры, @/./+/-/_.
        email:
          type: string
          format: email
        avatar:
          type: string
          format: uri
        timezone:
          type: string
          title: Временная зона
          maxLength: 64
        is_2fa_enabled:
          type: boolean
      required:
      - username
    TwoFactorAuthenticationCode:
      type: object
      properties:
        code:
          type: string
          maxLength: 6
          minLength: 6
      required:
      - code
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
